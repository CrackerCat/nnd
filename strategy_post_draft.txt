On remote debugging

How to use the debugger in clickhouse cloud? Options I could think of:
 (1) Full-fledged remote debugging: run the debugger (ptrace stuff, watch expression evaluation stuff, etc) on the server, have some protocol, make the UI asynchronous somehow. Seems like a lot of extra complexity to implement and maintain and test, but maybe I'm wrong about that.
 (2) Run the debugger on the server, stream the rendered "image" to the client. Send source code files from client to server on demand. Seems doable. Downsides: (a) server memory usage (for debug info), (b) input latency, especially if the server is in different region, (c) need to upload unstripped binary to the server (takes time).
 (3) Do nothing, scp the codebase to the server, and run debugger over ssh.

Current plan is to do (2) at some point and to not do (1), but I should think more about (1) to see if maybe it's not so bad.

---

On adoption

I've been using the debugger a lot and getting a lot of value out of it. But almost no one else has been interested in using it so far. Possible reasons I can think of:
 (1) Missing basic features (e.g. pretty-printers).
 (2) Bad usability (weird controls, looks insufficiently pretty).
 (3) Missing remote debugging (or something else to make it readily usable in clickhouse cloud).
 (4) People don't know it exists.
 (5) People are happy with gdb/lldb.
 (6) People incorrectly think that a good debugger wouldn't be useful to them.
 (7) People correctly think that a good debugger wouldn't be useful to them.
 (8) People assume it's not good and decided to not spend time and effort to evaluate it.
 (9) People didn't give it much thought and made the decision based on vibes, and vibes weren't right for them. (In other words, bad marketing/PR.)

Current plan is to focus on (1)-(2) first, then reevaluate.

A big problem is that I'm not getting any feedback, so am probably missing lots of glaring problems. But there are still a few glaring problems obvious even to me, so I'll work on those.

(It's telling that almost no one inside clickhouse is interested, even though clickhouse core seems as close to the target audience as it gets. We have hardcore system programmers that write a lot of code, the code is broken all the time and needs debugging, the control flow is often hard to follow without stepping through the code, people here know I'm not a bozo (or am I?), people here can easily ask questions and request features in slack or even in person, etc. If no one is interested despite all that then there doesn't seem to be any point in releasing to the public. My interpretation is that the product is just not good enough yet (or maybe it's all (7) and I'm on copium).)

---

On open source

What are benefits of open sourcing it?
 * Random people contributing new features. I mostly don't want that, because the quality would probably be low, and the job of managing a community sounds very unappealing. I don't mind contributions from clickhouse people though, you guys are cool :)
 * Random people finding bugs in the code. I expect this to be vanishingly rare.
 * People reading the code and learning something useful from it. I'm guessing this is very rare, but not sure.
 * More people will know it exists, because people are more likely to spread the word about an open source project than a closed-source one (even if it's free).

Most things that I care about can equally well be achieved by just publishing an executable (it is kinda already published: https://al13n.itch.io/nnd) and having a public issue tracker:
 * People using the debugger.
 * Users reporting bugs and requesting features.

So by far the main factor is how much open-sourcing increases the number of users. I'm not sure how to estimate that. I'm guessing the correct sequence is: (1) make the product good enough that clickhouse people want to use it, (2) publish+market it without open-sourcing (post to hacker news and lobsters and other places (idk which)), (3) if there are still ~0 users and I want to abandon the project, put it on github and stop active development.

---

> Maybe we should open-source the debugger?

For what purpose?
 * In hopes that it'll attract a significant number of users? This seems very unlikely. ClickHouse core seems as close to the target audience as it gets (hardcore systems programmers), and people here know I'm not (?) a bozo, and they had the debugger pitched to them in-person for an hour. And still almost no one was interested. My interpretation is that the product is just not good enough yet.
 * Abandon the project (and dump it on github because why not). No, I'm too attached to it, enjoy working on it, and still see promise.
